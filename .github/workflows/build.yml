name: Build Application

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [20.10.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python distutils and other dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel

      - name: Install dependencies
        run: npm install

      - name: Setup C++ compiler if needed
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y g++-12
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 100
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100
            g++ --version
          fi
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install gcc@12
            g++-12 --version
            echo "CC=gcc-12" >> $GITHUB_ENV
            echo "CXX=g++-12" >> $GITHUB_ENV
          fi
        shell: bash      - name: Install native dependencies with prebuild-install
        run: |
          cd release/app
          # Install better-sqlite3 from prebuilt binaries if possible
          npm install better-sqlite3@11.1.1 --build-from-source=false --no-save
          cd ../..
        
      - name: Set environment variables
        run: |
          echo "SUPA_PROJECT_ID=dummy_id" >> $GITHUB_ENV
          echo "SUPA_KEY=dummy_key" >> $GITHUB_ENV
          echo "AXIOM_TOKEN=dummy_token" >> $GITHUB_ENV
          echo "AXIOM_ORG_ID=dummy_org_id" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          # Skip native module rebuilding during package step
          echo "ELECTRON_SKIP_BINARY_DOWNLOAD=1" >> $GITHUB_ENV
          echo "npm_config_build_from_source=false" >> $GITHUB_ENV
          
          # Add special environment variables for macOS native module builds
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
            echo "LDFLAGS=-stdlib=libc++" >> $GITHUB_ENV
            echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Platform-specific setup
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "Setting up for macOS build"
            # Install additional dependencies
            brew install pkg-config
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            echo "Setting up for Linux build"
            sudo apt-get update
            sudo apt-get install -y libpng-dev libxext-dev libx11-dev libxcb1-dev
          fi
        shell: bash

      - name: Clean build directories
        run: |
          rm -rf dist
          rm -rf release/build
          rm -rf release/app/dist
        shell: bash

      - name: Build application
        run: npm run build

      - name: Debug directories after build
        run: |
          echo "Contents of dist directory:"
          ls -la dist || echo "dist directory not found"
          echo "Ensuring release/app/dist exists:"
          mkdir -p release/app/dist
          # Copy the built files to the release app directory
          if [ -d "dist" ]; then
            cp -r dist/* release/app/dist/ || echo "Failed to copy dist files"
            echo "Contents after copy:"
            ls -la release/app/dist || echo "release/app/dist directory not found"
          fi
        shell: bash
        
      - name: Handle electron-deeplink dependency
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            echo "Setting up electron-deeplink on macOS"
            cd release/app
            # Remove the module and reinstall with specific build flags for macOS
            rm -rf node_modules/electron-deeplink
            CXXFLAGS="-stdlib=libc++" LDFLAGS="-stdlib=libc++" npm install electron-deeplink@1.0.10 --no-save
            cd ../..
            # Apply patch to fix binding.gyp
            node .github/scripts/electron-deeplink-patch.js
            # Rebuild with correct flags
            cd release/app
            npm rebuild electron-deeplink --update-binary
            cd ../..
          fi
        shell: bash

      - name: Run package script
        run: npm run package -- --publish never
        env:
          ELECTRON_BUILDER_ALLOW_MISSING_DEPS: true
          npm_config_build_from_source: false
          USE_HARD_LINKS: false
          ELECTRON_CACHE: ${{ runner.temp }}/electron-cache
          ELECTRON_BUILDER_CACHE: ${{ runner.temp }}/electron-builder-cache
          # Skip rebuilding native modules that we've already built
          npm_config_ignore_scripts: true
          # Additional flags for debugging
          DEBUG: electron-builder

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: release/build
          retention-days: 7
          if-no-files-found: warn
